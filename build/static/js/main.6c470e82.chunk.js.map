{"version":3,"sources":["components/Contact.js","components/Contacts.js","components/Form.js","components/Find.js","components/Alert.js","services/contactServices.js","App.js","index.js"],"names":["Contact","contact","number","name","id","handleDelete","onClick","Contacts","contacts","find","style","listStyle","filter","toLowerCase","includes","map","key","Form","handleSubmit","handleChange","newContact","onSubmit","onChange","value","placeholder","required","type","Find","handleFind","alert","message","className","baseUrl","App","useState","setFind","setContacts","setAlert","setNewContact","resetAlert","setTimeout","useEffect","axios","get","then","res","data","initialData","catch","err","e","target","preventDefault","newCont","changedCont","cont","window","confirm","updatedContact","put","updatedCont","post","concat","Alert","delete","remove","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c470e82.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Contact = ({ contact: { number, name, id }, handleDelete }) => {\r\n  return (\r\n    <li>\r\n      {name} - {number}\r\n      <button onClick={() => handleDelete(id, name)}>delete</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n","import React, { Fragment } from 'react';\r\nimport Contact from './Contact';\r\n\r\nconst Contacts = ({ contacts, find, handleDelete }) => {\r\n  return (\r\n    <Fragment>\r\n      <h2>Contacts</h2>\r\n      <ul style={{ listStyle: 'none' }}>\r\n        {contacts\r\n          .filter(contact =>\r\n            contact.name.toLowerCase().includes(find.toLowerCase())\r\n          )\r\n          .map(contact => (\r\n            <Contact\r\n              key={contact.id}\r\n              contact={contact}\r\n              handleDelete={handleDelete}\r\n            />\r\n          ))}\r\n      </ul>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Contacts;\r\n","import React from 'react';\r\n\r\nconst Form = ({ handleSubmit, handleChange, newContact }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <div>\r\n        name:{' '}\r\n        <input\r\n          onChange={handleChange}\r\n          value={newContact.name}\r\n          name='name'\r\n          placeholder='add name...'\r\n          required\r\n        />\r\n        number:{' '}\r\n        <input\r\n          onChange={handleChange}\r\n          value={newContact.number}\r\n          name='number'\r\n          placeholder='add number...'\r\n          required\r\n        />\r\n      </div>\r\n      <div>\r\n        <button type='submit'>add</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { Fragment } from 'react';\r\n\r\nconst Find = ({ handleFind, find }) => {\r\n  return (\r\n    <Fragment>\r\n      find: <input onChange={handleFind} value={find} />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Find;\r\n","import React from 'react';\r\n\r\nconst alert = ({ alert: { type, message } }) => {\r\n  if (type === '') return null;\r\n\r\n  return <div className={type}>{message}</div>;\r\n};\r\n\r\nexport default alert;\r\n","import axios from 'axios';\r\n\r\nconst baseUrl = '/api/persons';\r\n\r\nexport const getAll = () => {\r\n  const req = axios.get(baseUrl);\r\n  return req.then(res => res.data);\r\n};\r\n\r\nexport const create = newCont => {\r\n  const req = axios.post(baseUrl, newCont);\r\n\r\n  return req.then(res => res.data);\r\n};\r\n\r\nexport const remove = id => {\r\n  const req = axios.delete(`${baseUrl}/${id}`);\r\n\r\n  return req.then(res => res.data);\r\n};\r\n\r\nexport const update = (id, changedCont) => {\r\n  const req = axios.put(`${baseUrl}/${id}`, changedCont);\r\n\r\n  return req.then(res => res.data);\r\n};\r\n","import React, { useState, useEffect, Fragment } from 'react';\n\n// COMPONENTS ==========================================\nimport Contacts from './components/Contacts';\nimport Form from './components/Form';\nimport Find from './components/Find';\nimport Alert from './components/Alert';\n\n// API SERVICE =========================================\nimport { getAll, create, remove, update } from './services/contactServices';\n\nconst App = () => {\n  const [find, setFind] = useState('');\n  const [contacts, setContacts] = useState([]);\n  const [alert, setAlert] = useState({\n    type: '',\n    message: '',\n  });\n  const [newContact, setNewContact] = useState({\n    name: '',\n    number: '',\n  });\n\n  // Funtion to reset alert state after 3s\n  const resetAlert = () =>\n    setTimeout(\n      () =>\n        setAlert({\n          type: '',\n          message: '',\n        }),\n      3000\n    );\n\n  // FETCH INIT DATA ==========================================\n  useEffect(() => {\n    getAll()\n      .then(initialData => setContacts(initialData))\n      .catch(err => {\n        setAlert({\n          type: 'fail',\n          message: err.message,\n        });\n        resetAlert();\n      });\n  }, []);\n\n  // FORM DATA HANDLING =========================================\n  // A single eventhandler with dynamic key props\n  const handleChange = e => {\n    setNewContact({\n      ...newContact,\n      [e.target.name]: e.target.value,\n    });\n  };\n\n  // SEARCH CONTACTS ============================================\n  const handleFind = e => setFind(e.target.value);\n\n  // ADD OR UPDATE CONTACT ======================================\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Check if name already exists in contacts\n    const contact = contacts.find(\n      cont => newContact.name.toLowerCase() === cont.name.toLowerCase()\n    );\n\n    // If a contact already exists with the name prompt the user for update confirmation\n    if (contact) {\n      const confirm = window.confirm(\n        `Would you like to update ${contact.name}'s number?`\n      );\n\n      if (confirm) {\n        // Change the contact number according to the input\n        const updatedContact = { ...contact, number: newContact.number };\n\n        // Send a PUT request to the server\n        update(contact.id, updatedContact)\n          .then(updatedCont => {\n            // Update the state with the response\n            setContacts(\n              contacts.map(cont =>\n                cont.id === updatedCont.id ? updatedCont : cont\n              )\n            );\n            setAlert({\n              type: 'success',\n              message: 'Contact updated',\n            });\n            resetAlert();\n          })\n          .catch(err => {\n            setAlert({\n              type: 'fail',\n              message: err.message,\n            });\n            resetAlert();\n          });\n        // Set and Reset states\n        setNewContact({\n          name: '',\n          number: '',\n        });\n      }\n    } else {\n      // Post new contact to the server and add response obj to the state\n      create(newContact)\n        .then(newCont => {\n          setContacts(contacts.concat(newCont));\n          setAlert({\n            type: 'success',\n            message: 'Contact added',\n          });\n          resetAlert();\n        })\n        .catch(err => {\n          setAlert({\n            type: 'fail',\n            message: err.message,\n          });\n          resetAlert();\n        });\n\n      // Set and Reset states\n      setNewContact({\n        name: '',\n        number: '',\n      });\n    }\n  };\n\n  // DELETE A CONTACT =======================================\n  const handleDelete = (id, name) => {\n    const confirm = window.confirm(`Delete ${name}?`);\n\n    if (confirm) {\n      remove(id)\n        .then(() => {\n          setContacts(contacts.filter(contact => contact.id !== id));\n          setAlert({\n            type: 'success',\n            message: 'Contact deleted',\n          });\n          resetAlert();\n        })\n        .catch(err => {\n          setAlert({\n            type: 'fail',\n            message: err.message,\n          });\n          resetAlert();\n        });\n    }\n  };\n\n  return (\n    <Fragment>\n      <h2>Phonebook</h2>\n      <Find handleFind={handleFind} find={find} />\n      <br />\n      <Form\n        handleSubmit={handleSubmit}\n        handleChange={handleChange}\n        newContact={newContact}\n      />\n      <br />\n      <Alert alert={alert} />\n      <Contacts contacts={contacts} find={find} handleDelete={handleDelete} />\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}